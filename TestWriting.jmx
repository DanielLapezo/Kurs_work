<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">${__groovy(use(groovy.time.TimeCategory) { (new Date() + 1.minutes).format(&apos;h:mm a&apos;\,TimeZone.getTimeZone(&quot;EST&quot;)) },_appointmentTime)}</stringProp>
          <stringProp name="RESPONSE_DATA">${CSV_Login}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Test" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Test</stringProp>
            <stringProp name="RegexExtractor.regex">(PerfTestUser\d+@corp.local)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Test_NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">name = vars.get(&quot;Test&quot;);

// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
if (name.equals(&quot;PerfTestUser0378@corp.local&quot;)) {
    f = new FileOutputStream(&quot;C:/Tools/apache-jmeter-5.4.1/bin/results.csv&quot;, true);
	p = new PrintStream(f); 
	this.interpreter.setOut(p); 
	print(name);
	f.close();
}
else if (name.equals(&quot;PerfTestUser0382@corp.local&quot;)) {
    f = new FileOutputStream(&quot;C:/Tools/apache-jmeter-5.4.1/bin/results.csv&quot;, true);
	p = new PrintStream(f); 
	this.interpreter.setOut(p); 
	print(name);
	f.close();
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">name = vars.get(&quot;Test&quot;);

// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
if (name.equals(&quot;PerfTestUser0378@corp.local&quot;)) {
    f = new FileOutputStream(&quot;C:/Tools/apache-jmeter-5.4.1/bin/results.csv&quot;, true);
	p = new PrintStream(f); 
	this.interpreter.setOut(p); 
	print(name);
	f.close();
}
else if (name.equals(&quot;PerfTestUser0382@corp.local&quot;)) {
    f = new FileOutputStream(&quot;C:/Tools/apache-jmeter-5.4.1/bin/results.csv&quot;, true);
	p = new PrintStream(f); 
	this.interpreter.setOut(p); 
	print(name);
	f.close();
}</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Random;
import java.util.concurrent.ThreadLocalRandom
import java.time.format.DateTimeFormatter
import java.time.LocalDate
import java.time.Period

vars.put(&quot;_timeOfDeath&quot;, org.apache.commons.lang.RandomStringUtils.random(1, &quot;67&quot;) + &quot;:&quot; + org.apache.commons.lang.RandomStringUtils.random(1, &quot;012345&quot;) + org.apache.commons.lang.RandomStringUtils.random(1, &quot;0123456789&quot;) + &quot; PM&quot;)
vars.put(&quot;_timeOfDeath2&quot;, org.apache.commons.lang.RandomStringUtils.random(1, &quot;89&quot;) + &quot;:&quot; + org.apache.commons.lang.RandomStringUtils.random(1, &quot;012345&quot;) + org.apache.commons.lang.RandomStringUtils.random(1, &quot;0123456789&quot;) + &quot; PM&quot;)
${__groovy(use(groovy.time.TimeCategory) { (new Date() + 1.minutes).format(&apos;h:mm a&apos;, c1) })}

</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition"></stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
